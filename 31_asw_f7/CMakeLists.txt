
#[[-----------------------------------
Set Project Directories
-------------------------------------]]
set(bsp_directory       ${CMAKE_CURRENT_SOURCE_DIR}/01_bsp)
set(main_directory      ${CMAKE_CURRENT_SOURCE_DIR}/30_main)
set(os_directory        ${CMAKE_CURRENT_SOURCE_DIR}/10_os)
set(lib_directory       ${CMAKE_CURRENT_SOURCE_DIR}/70_lib)


#[[-----------------------------------
Include CMakeFiles from various modules
-------------------------------------]]
add_subdirectory(${bsp_directory})
add_subdirectory(${main_directory})
add_subdirectory(${os_directory})
add_subdirectory(${lib_directory})

#[[-----------------------------------
Define the exe.
-------------------------------------]]
add_executable( ${target}
    # HAL
    $<TARGET_OBJECTS:cmsis_f7xx_component>
    $<TARGET_OBJECTS:stm32f7xx_hal_driver_component>
    $<TARGET_OBJECTS:f7_disco_bsp_component>
    # OS
    $<TARGET_OBJECTS:free_rtos_10_3_component>
    # LIB
    $<TARGET_OBJECTS:lib_component>
    # MAIN
    $<TARGET_OBJECTS:main_component>
    # SWC
)

#[[-----------------------------------
Libraries
-------------------------------------]]

#[[ ---- UI ---- ]]
set (lib_file_01 ${lib_directory}/STemWin/Lib/STemWin532_CM7_GCC.a)

if (EXISTS ${lib_file_01})
    message ("Library ${lib_file_01} found!")
else()
    message ("Library ${lib_file_01} not found!")    
endif()

target_link_libraries(${target}
    PUBLIC ${lib_file_01})

#[[ ---- ARM Cortex M7 ---- ]]

set (lib_file_02 ${lib_directory}/libarm-cortex-m7/libarm_cortexM7lfsp_math.a)

if (EXISTS ${lib_file_02})
    message ("Library ${lib_file_02} found!")
else()
    message ("Library ${lib_file_02} not found!")    
endif()

target_link_libraries(${target}
    PUBLIC ${lib_file_02})

add_executable(${PROJECT_NAME_EXE}::${target} ALIAS ${target})

#[[-----------------------------------
How to compile:
Linking
-------------------------------------]]
target_link_options(${target} PUBLIC
    -T${CMAKE_PROJECT_ROOT}/90_config/10_linker/${SYSTEM_LINKER_FILE}
    --specs=rdimon.specs
    ${LINKER_EXT_OPTIONS}
    -Wl,-Map=${map_file},--cref
    -Wl,--gc-sections
)

#[[-----------------------------------
How to compile:
Post-build
-------------------------------------]]

add_custom_command(TARGET ${target}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${target}> ${CMAKE_BINARY_DIR}/$<TARGET_FILE_NAME:${target}>
)

#[[-
add_custom_command(TARGET ${target}
    POST_BUILD
    COMMAND arm-none-eabi-size ${CMAKE_BINARY_DIR}/${target}
)
]]

add_custom_command(TARGET ${target}
    POST_BUILD
    COMMAND arm-none-eabi-objcopy -O ihex ${CMAKE_BINARY_DIR}/${target} ${CMAKE_BINARY_DIR}/${hex_file}
    COMMAND arm-none-eabi-objcopy -O binary ${CMAKE_BINARY_DIR}/${target} ${CMAKE_BINARY_DIR}/${bin_file}
)
